# -*- ii: enabled; -*-
#+TITLE: kubemacs

* Introduction

ii brings a number of technologies together to create an open workflow.
Using docker will reduce the setup and maintenance of sharing the core components with others.

* Core Components

- [[http://spacemacs.org/][Spac(emacs)]]
- [[https://orgmode.org/][Orgmode]]
- [[https://gitlab.com/oer/oer-reveal][oer-reveal]]

* Build

#+BEGIN_SRC tmate
docker build -t gcr.io/apisnoop/kubemacs .
#+END_SRC

* Running in k8s
** Deployment   
   #+begin_src shell
   kubectl apply -f kubemacs.yaml
   #+end_src
** Attaching to the Pod
   #+begin_src shell
     PODNAME=$(kubectl -n kubemacs get pod --selector=app=kubemacs -o name  | sed s:pod/::)
     kubectl exec -t -i $PODNAME -- attach
   #+end_src
* dev-build loop
  #+begin_src shell
    IIDE=gcr.io/apisnoop/kubemacs:0.9.16
    PODNAME=$(kubectl -n kubemacs get pod --selector=app=kubemacs -o name  | sed s:pod/::)
    docker build -t $IIDE .
    kind load docker-image $IIDE
    kubectl run --generator=run-pod/v1 $PODNAME --serviceaccount='admin-kubemacs' --image=$IIDE
    kubectl exec -t -i $PODNAME -- attach # osc52 will be sent with tmate url / you can have multiple of these
  #+end_src
* Script to connect to a remote box and configure your kubeconfig
  #+begin_src shell
    # configuration
    export KUBECONFIG=~/.kube/config-my-remote
    # [IMPORTANT] set your user
    REMOTE_USER=root
    # [IMPORTANT] set your remote box's IP
    REMOTE_HOST=x.x.x.x

    # fetch the remote kubeconfig
    ssh $REMOTE_USER@$REMOTE_HOST kubectl config view --merge --minify --flatten > $KUBECONFIG

    # find the port of the Kubernetes API in the kubeconfig and export it
    export K8S_REMOTE_PORT=$(kubectl config view -o jsonpath='{.clusters[0].cluster.server}' | cut -d ':' -f3)
    # forward the port from the remote box to the localhost
    ssh -fN -L $K8S_REMOTE_PORT:localhost:$K8S_REMOTE_PORT $REMOTE_USER@$REMOTE_HOST
  #+end_src

  #+begin_src shell
  kubectl get pods -A
  #+end_src

**  Add a helper function to your ~/.bashrc
  | Name          | Purpose                           | Example                  |
  |---------------+-----------------------------------+--------------------------|
  | ~KUBECONFIG~  | the kubeconfig to save to and use | ~/.kube/config-my-remote |
  | ~REMOTE_USER~ | the remote user to login as       | ii                       |
  | ~REMOTE_HOST~ | the remote host/ip to connect to  | myhost.example.com       |
  |---------------+-----------------------------------+--------------------------|
  #+begin_src shell
    cat << EOF >> ~/.bashrc
    function ii_setup_k8s_from_remote() {
    # ensure:
    # - remote server kubeconfig
    # - defined $KUBECONFIG
    # - remote server Kubernetes API forwarded to localhost

    function ii_setup_k8s_from_remote_cleanup() {
      set +e
    }

    trap ii_setup_k8s_from_remote_cleanup EXIT

    set -e

    if [ -x /tmp/ii_setup_k8s_from_remote-hasrun ]; then
            return
    fi

    # configuration
    if [ -z \$KUBECONFIG ]; then
      export KUBECONFIG=~/.kube/config-my-remote
    fi

    # [IMPORTANT] set your user
    if [ -z \$REMOTE_USER ]; then
       echo "[error] please set \\\$REMOTE_USER"
       return
    fi

    # [IMPORTANT] set your remote box's IP
    if [ -z \$REMOTE_HOST ]; then
       echo "[error] please set \\\$REMOTE_HOST"
       return
    fi

    # fetch the remote kubeconfig
    ssh \$REMOTE_USER@\$REMOTE_HOST kubectl config view --merge --minify --flatten > \$KUBECONFIG

    # find the port of the Kubernetes API in the kubeconfig and export it
    export K8S_REMOTE_PORT=\$(kubectl config view -o jsonpath='{.clusters[0].cluster.server}' | cut -d ':' -f3)

    # check if not already listening
    if ! lsof -i:\$K8S_REMOTE_PORT 2>&1 > /dev/null; then
      # forward the port from the remote box to the localhost
      ssh -fN -L \$K8S_REMOTE_PORT:localhost:\$K8S_REMOTE_PORT \$REMOTE_USER@\$REMOTE_HOST
    fi

    echo "[ok]"
    touch /tmp/ii_setup_k8s_from_remote-hasrun
    ii_setup_k8s_from_remote_cleanup

    }
    EOF

  #+end_src

